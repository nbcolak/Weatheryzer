using Moq;
using Xunit;
using Weatheryzer.Application.WeatherForecast.Command;
using Weatheryzer.Shared.Interfaces;
using Weatheryzer.Shared.Responses;
using Weatheryzer.Domain.Entities;
using System.Threading;
using System.Threading.Tasks;

namespace Weatheryzer.Application.WeatherForecast.Command;



public class CreateWeatherCommandHandlerTests
{
    private readonly Mock<IUnitOfWork> _unitOfWorkMock;
    private readonly CreateWeatherCommandHandler _handler;

    public CreateWeatherCommandHandlerTests()
    {
        _unitOfWorkMock = new Mock<IUnitOfWork>();
        _handler = new CreateWeatherCommandHandler(_unitOfWorkMock.Object);
    }

    [Fact]
    public async Task Handle_ShouldReturnResponse_WhenWeatherDataIsCreated()
    {
        // Arrange
        var command = new CreateWeatherCommand("Istanbul", 25.5, "Sunny", 60, 15, "Generated by server");
        var weatherData = new WeatherData
        {
            City = command.City,
            TemperatureC = command.TemperatureC,
            WeatherCondition = command.Condition,
            Timestamp = It.IsAny<System.DateTime>(), // Mock iÃ§in rastgele zaman
            Data = "{\"Humidity\":60,\"WindSpeed\":15,\"AdditionalInfo\":\"Generated by server\"}"
        };

        _unitOfWorkMock
            .Setup(u => u.Repository<WeatherData>().AddAsync(It.IsAny<WeatherData>()))
            .Returns(Task.CompletedTask);

        _unitOfWorkMock
            .Setup(u => u.SaveChangesAsync())
            .Returns(Task.CompletedTask);

        // Act
        var result = await _handler.Handle(command, CancellationToken.None);

        // Assert
        Assert.NotNull(result);
        Assert.True(result.Success);
        Assert.Equal(201, result.StatusCode.Code);
        Assert.Equal("Weather data created successfully.", result.Message);

        _unitOfWorkMock.Verify(u => u.Repository<WeatherData>().AddAsync(It.IsAny<WeatherData>()), Times.Once);
        _unitOfWorkMock.Verify(u => u.SaveChangesAsync(), Times.Once);
    }
}